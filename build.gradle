plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.tech.padawan'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'com.auth0:java-jwt:4.5.0'
	implementation 'io.github.cdimascio:dotenv-java:3.0.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
}

tasks.named('test') {
	useJUnitPlatform()
}


test{
	useJUnitPlatform()
	finalizedBy jacocoTestReport
	testLogging {
		events "failed", "skipped"
		exceptionFormat "full"
		showStandardStreams = true
	}

	afterTest { desc, result ->
		if (!desc.className.equals(desc.displayName)) return
		println "Executed test class: ${desc.className} - Result: ${result.resultType}"
	}

	afterSuite { desc, result ->
		if (!desc.parent) {
			println "\n==== TEST SUMMARY ===="
			println "Total tests: ${result.testCount}"
			println "Passed     : ${result.successfulTestCount}"
			println "Failed     : ${result.failedTestCount}"
			println "Skipped    : ${result.skippedTestCount}"
			println "======================"
		}
	}
}

jacoco{
	toolVersion = "0.8.7"
}

test {
	jacoco{
		enabled = true
	}
}


jacocoTestCoverageVerification{
	violationRules{
		rule{
			limit{
				minimum = 0.8
			}
		}
	}
}

tasks.test {
	def envFile = file(".env-test")
	if (envFile.exists()) {
		envFile.eachLine { line ->
			line = line.trim()
			if (line && !line.startsWith("#")) {
				def (key, value) = line.split("=", 2)
				// Remove aspas se houver
				value = value?.replaceAll(/^['"]|['"]$/, "")
				environment key, value
			}
		}
	}
}
